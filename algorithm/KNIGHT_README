AUTHOR:zhanghui9700@gmail.com
DATE:2012-05-27

DESCRIPTION:
在一个国际象棋棋盘上(N*N)，有一个棋子"马(Knight)"，处在任意位置(x, y)；
马的走法是日字型，即其可以在一个方向上前进或后退两格，在另一方向上前进或后退一格。
请编程找出马如何从位置(x, y)走到棋盘右下角(N, N)的位置的步骤。

例如：假设棋盘大小为3*3， 马处在（1，2）位置， 马只需要走一步， 即 (1,2)->(3,3)即可到达目的地。

SOLUTION:
$/python knight.py 8 2 2


算法实现简要说明：
此算法可以抽象为图的遍历，主要包括深度优先和广度优先两种基本策略，在马踏棋盘中需要避免重复访问父节点造成死循环的状态。
另外在knight.py中采用深度优先搜索的解决方法，但是会优先遍历一遍父节点的所有子节点是否包含目标节点，如不包含目标节点才递归查找子节点。

问题：
目前knight.py只是寻找(x,y)->(N,N)的速度还可以接受，但是任意两点(x1,y1)->(x2,y2)(x2!=N and y2!=N)的速度有问题，算法需要优化和改进。
