Decorator 只是一个语法糖，如果您过于急切，那么它就会使您搬起石头砸了自己的脚。decorator 其实就是一个至少具有一个参数的函数 —— 程序员要负责确保 decorator 的返回内容仍然是一个有意义的函数或方法，并且实现了原函数为使连接有用而做的事情。
如何调用decorator
第一种(decorator不带参数)：
@A
def f():
	pass

这种形式是decorator A不带参数的写法
python解释器会把编译成：
f = A(f)

还可以扩展成

@A
@B
@C
def f():
	pass

类似 f = A(B(C(f)))

第二种(decorator带参数)：

@A(args)
def f():
	pass

_A= A(args)
f = _A(f)

python解释器会先执行A(args)返回一个decorator函数，然后再装饰f

decorator的定义：
针对第一种不带参数的decorator
1.
def A(func):
	func.xxx = 'xxxx'
	return func
2.
def A(func):
	def _wrap(*args):
		return func(args)
	
	return _wrap

注意_wrap的定义形式鳌鱼待处理的函数相同，因此还可以写的通用一些，如：
def A(func):
	def _wrap(*args,**kwargs):
		return func(*args,**kwargs)
	
	return _wrap

可以看出，在A中定义了新的函数，然后A返回这个新的函数。在新函数中，先处理一些事情，比如对参数进行检查，或作一些一些其他的工作，然后再调用原始的函数进行处理。这种模式可以看成在调用原函数前，通过decorator技术进行一些拦截验证和扩展，既可以在原函数前拦截也可以在原函数执行后进行拦截，太尼玛典型的注入了。
def A(func):
	def _wrap(*args,**kwargs):
		result = func(*args,**kwargs)
		if result:
			return do_something(result)
		else
			return result
	return _wrap

第二种带参数的decorator
文档：如果你的decorator在调用时使用了参数，那么你的decorator函数只会使用这些参数进行调用，因此你需要返回一个新的decorator函数，这样就与第一种形式一致了。

def A(args):
	def _A(func):
		def _wrap(*args,**kwargs):
			return func(*args,**kwargs)
		return _wrap
	return _A

@A('hello')
def f():
	pass

decorator的应用场景
注入、拦截，在不改变原函数代码的前提下修改函数的行为

staticmethod,classmethod

class Foo(object):
	def __init__(self)
		pass
	
	@staticmethod
	def say_hello(self):
		print 'say hello'
	
	@classmethod
	def run(self):
		print 'run...'
	
	@property
	def name(self):
		return 'hello python'
	#name = property(name)
